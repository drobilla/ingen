@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix ingen: <http://drobilla.net/ns/ingen#> .
@prefix lv2: <http://lv2plug.in/ns/lv2core#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix ui: <http://lv2plug.in/ns/extensions/ui#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://drobilla.net/drobilla#me>
	a foaf:Person ;
	foaf:name "David Robillard" ;
	foaf:mbox <mailto:d@drobilla.net> ;
	rdfs:seeAlso <http://drobilla.net/drobilla> .

ingen:
	a owl:Ontology ;
	doap:name "Ingen" ;
	doap:homepage <http://drobilla.net/software/ingen> ;
	doap:maintainer <http://drobilla.net/drobilla#me> .

ingen:Plugin
	a owl:Class ;
	rdfs:label "Plugin" ;
	rdfs:comment """
A class which can be instantiated into a ingen:Node.  A plugin has a set of input
and output "ports".  In practice this class is semantically equivalent to
lv2:Plugin, it only exists to allow the ingen ontology to be useful for
"plugins" that aren't semantically LV2 plugins.  See the LV2 specification
for details about the required properties (rdf:type, doap:name, doap:license,
and lv2:port).
""" .

ingen:Patch
	a owl:Class ;
	rdfs:subClassOf ingen:Plugin ;
	rdfs:label "Patch" ;
	rdfs:comment """
A collection of Nodes connected together form a Patch, which is itself
a :Plugin (and thus can be part of another patch, and so on)
""" .

ingen:node
	a owl:ObjectProperty ;
	rdfs:domain ingen:Patch ;
	rdfs:range ingen:Node ;
	rdfs:label "node" ;
	rdfs:comment "Signifies a patch contains some node." .

ingen:polyphony
	a owl:ObjectProperty ;
	rdfs:domain ingen:Patch ;
	rdfs:range xsd:integer ;
	rdfs:label "Polyphony" ;
	rdfs:comment """
The amount of polyphony in a Patch.  This defines the number of voices
present on all :polyphonic children of this patch.  Because a Patch is
also a Node, a Patch may have both :polyphony and :polyphonic properties.
These specify different things: :polyphony specifies the voice count
of the Patch's children, and :polyphonic specifies whether the patch is
seen as polyphonic to the Patch's parent.
""" .

ingen:Object
	a owl:Class ;
	rdfs:label "Ingen Object" ;
	rdfs:comment """
A signal processing object which is part of a Patch.  An Object MUST have
exactly one lv2:symbol property.  This MAY be inferred from the URI where
possible (e.g. in a system which publishes node URIs in a heirarchial way
such that the parent can be 'chopped' to get a legal symbol).
""" .

ingen:polyphonic
	a owl:ObjectProperty ;
	rdfs:domain ingen:Object ;
	rdfs:range xsd:boolean ;
	rdfs:label "Polyphonic" ;
	rdfs:comment """
Signifies this object should be replicated when it is part of a polyphonic
patch.  The amount of polyphony (i.e. the number of voices) is determined
by the :polyphony property of the containing patch.  This is a boolean
property which defines whether the parent can access each voice individuall:
All objects within a patch are either polyphonic or not from their parent's
perspective.  An Object may itself have "internal" polyphony but not be
polyphonic according to this property, if those voices are mixed down.
""" .

ingen:Node
	a owl:Class ;
	rdfs:subClassOf ingen:Object ;
	rdfs:label "Node" ;
	rdfs:comment """
An instance of a Plugin.  Since a Patch is a Plugin, an instance of a Patch
is also a Node.  A Node inherits all the properties of the plugin of which
it is an instance, but may have properties of its own: any properties of
the node take precedence over properties of the node's plugin.  This way a
node can be expressed as a lightweight set of changes (e.g. input values)
from its plugin or patch which may be defined elsewhere.

A node MUST have at least one ingen:prototype property which is a subclass
of :Plugin.  When there are many such properties, an applications SHOULD
use the most specific class it understands.
""" .

ingen:enabled
	a owl:ObjectProperty ;
	rdfs:domain ingen:Node ;
	rdfs:range xsd:boolean ;
	rdfs:label "Enabled" ;
	rdfs:comment "Signifies the node is or should be running." .

ingen:Edge
	a owl:Class ;
	rdfs:label "Edge" ;
	rdfs:comment """
A connection between two ports.  Patches have a set of edges which
define how its component nodes and ports are connected.  An Edge MUST
have exactly one ingen:tail and exactly one ingen:head property.
""" .

ingen:edge
	a owl:ObjectProperty ;
	rdfs:domain ingen:Patch ;
	rdfs:range ingen:Edge ;
	rdfs:comment "An edge contained in this patch." .

ingen:tail
	a owl:ObjectProperty ,
		owl:FunctionalProperty ;
	rdfs:domain ingen:Edge ;
	rdfs:range ingen:Port ;
	rdfs:label "tail" ;
	rdfs:comment "The source/sending port of this edge" .

ingen:head
	a owl:ObjectProperty ,
		owl:FunctionalProperty ;
	rdfs:domain ingen:Edge ;
	rdfs:range ingen:Port ;
	rdfs:label "head" ;
	rdfs:comment "The destination/receiving/sink port of this edge" .
