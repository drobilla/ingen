/* This file is part of Ingen.  Copyright (C) 2006 Dave Robillard.
 * 
 * Ingen is free software; you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 * 
 * Ingen is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for details.
 * 
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 */


#include "OSCModelEngineInterface.h"
//#include "Serializer.h"
#include "PatchModel.h"
#include "raul/Path.h"
#include <iostream>
#include <unistd.h>
#include "cmdline.h"  // generated by gengetopt

using std::cout; using std::endl; 

using namespace Ingen::Client;

int main(int argc, char** argv)
{
	const char* engine_url  = NULL;
	int         client_port = 0;
	
	/* **** Parse command line options **** */

	gengetopt_args_info args_info;
	if (cmdline_parser (argc, argv, &args_info) != 0)
		return 1;

	if (args_info.engine_url_given) {
		engine_url = args_info.engine_url_arg;
	} else {
		cout << "[Main] No engine URL specified.  Attempting to use osc.udp://localhost:16180" << endl;
		engine_url = "osc.udp://localhost:16180";
	}	

	if (args_info.client_port_given)
		client_port = args_info.client_port_arg;


	/* **** Mr. Spock.. Engage **** */


	SharedPtr<OSCModelEngineInterface> engine(new OSCModelEngineInterface(engine_url));
	//Serializer serializer(engine);
	
	/* Connect to engine */
	engine->attach(-1, client_port);
	engine->activate();
	//engine->register_client(NULL); // FIXME

	//int id = engine->get_next_request_id();
	//engine->set_wait_response_id(id);
	//engine->load_plugins(id);
	//engine->wait_for_response();
	/* FIXME: Make this work like this:
	 * engine->load_plugins();
	 * engine->wait_for_response();
	 */

	// Load patches
	for (uint i=0; i < args_info.inputs_num; ++i) {
		cerr << "FIXME: load patch" << endl;
		//SharedPtr<PatchModel> pm(new PatchModel("", 0));
		//pm->filename(args_info.inputs[i]);
		//serializer.load_patch(pm, true);
	}
	
	return 0;
}
